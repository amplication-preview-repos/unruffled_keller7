/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreditCardHolder } from "./CreditCardHolder";
import { CreditCardHolderCountArgs } from "./CreditCardHolderCountArgs";
import { CreditCardHolderFindManyArgs } from "./CreditCardHolderFindManyArgs";
import { CreditCardHolderFindUniqueArgs } from "./CreditCardHolderFindUniqueArgs";
import { CreateCreditCardHolderArgs } from "./CreateCreditCardHolderArgs";
import { UpdateCreditCardHolderArgs } from "./UpdateCreditCardHolderArgs";
import { DeleteCreditCardHolderArgs } from "./DeleteCreditCardHolderArgs";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { RequestFindManyArgs } from "../../request/base/RequestFindManyArgs";
import { Request } from "../../request/base/Request";
import { CreditCardHolderService } from "../creditCardHolder.service";
@graphql.Resolver(() => CreditCardHolder)
export class CreditCardHolderResolverBase {
  constructor(protected readonly service: CreditCardHolderService) {}

  async _creditCardHoldersMeta(
    @graphql.Args() args: CreditCardHolderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CreditCardHolder])
  async creditCardHolders(
    @graphql.Args() args: CreditCardHolderFindManyArgs
  ): Promise<CreditCardHolder[]> {
    return this.service.creditCardHolders(args);
  }

  @graphql.Query(() => CreditCardHolder, { nullable: true })
  async creditCardHolder(
    @graphql.Args() args: CreditCardHolderFindUniqueArgs
  ): Promise<CreditCardHolder | null> {
    const result = await this.service.creditCardHolder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CreditCardHolder)
  async createCreditCardHolder(
    @graphql.Args() args: CreateCreditCardHolderArgs
  ): Promise<CreditCardHolder> {
    return await this.service.createCreditCardHolder({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CreditCardHolder)
  async updateCreditCardHolder(
    @graphql.Args() args: UpdateCreditCardHolderArgs
  ): Promise<CreditCardHolder | null> {
    try {
      return await this.service.updateCreditCardHolder({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreditCardHolder)
  async deleteCreditCardHolder(
    @graphql.Args() args: DeleteCreditCardHolderArgs
  ): Promise<CreditCardHolder | null> {
    try {
      return await this.service.deleteCreditCardHolder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Order], { name: "orders" })
  async findOrders(
    @graphql.Parent() parent: CreditCardHolder,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Request], { name: "requests" })
  async findRequests(
    @graphql.Parent() parent: CreditCardHolder,
    @graphql.Args() args: RequestFindManyArgs
  ): Promise<Request[]> {
    const results = await this.service.findRequests(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
