/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CreditCardHolderService } from "../creditCardHolder.service";
import { CreditCardHolderCreateInput } from "./CreditCardHolderCreateInput";
import { CreditCardHolder } from "./CreditCardHolder";
import { Request } from "../../request/base/Request";
import { CreditCardHolderFindManyArgs } from "./CreditCardHolderFindManyArgs";
import { CreditCardHolderWhereUniqueInput } from "./CreditCardHolderWhereUniqueInput";
import { CreditCardHolderUpdateInput } from "./CreditCardHolderUpdateInput";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { OrderWhereUniqueInput } from "../../order/base/OrderWhereUniqueInput";
import { RequestFindManyArgs } from "../../request/base/RequestFindManyArgs";
import { RequestWhereUniqueInput } from "../../request/base/RequestWhereUniqueInput";

export class CreditCardHolderControllerBase {
  constructor(protected readonly service: CreditCardHolderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreditCardHolder })
  async createCreditCardHolder(
    @common.Body() data: CreditCardHolderCreateInput
  ): Promise<CreditCardHolder> {
    return await this.service.createCreditCardHolder({
      data: data,
      select: {
        bankAccount: true,
        createdAt: true,
        creditCardType: true,
        email: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreditCardHolder] })
  @ApiNestedQuery(CreditCardHolderFindManyArgs)
  async creditCardHolders(
    @common.Req() request: Request
  ): Promise<CreditCardHolder[]> {
    const args = plainToClass(CreditCardHolderFindManyArgs, request.query);
    return this.service.creditCardHolders({
      ...args,
      select: {
        bankAccount: true,
        createdAt: true,
        creditCardType: true,
        email: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreditCardHolder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async creditCardHolder(
    @common.Param() params: CreditCardHolderWhereUniqueInput
  ): Promise<CreditCardHolder | null> {
    const result = await this.service.creditCardHolder({
      where: params,
      select: {
        bankAccount: true,
        createdAt: true,
        creditCardType: true,
        email: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreditCardHolder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCreditCardHolder(
    @common.Param() params: CreditCardHolderWhereUniqueInput,
    @common.Body() data: CreditCardHolderUpdateInput
  ): Promise<CreditCardHolder | null> {
    try {
      return await this.service.updateCreditCardHolder({
        where: params,
        data: data,
        select: {
          bankAccount: true,
          createdAt: true,
          creditCardType: true,
          email: true,
          id: true,
          name: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreditCardHolder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCreditCardHolder(
    @common.Param() params: CreditCardHolderWhereUniqueInput
  ): Promise<CreditCardHolder | null> {
    try {
      return await this.service.deleteCreditCardHolder({
        where: params,
        select: {
          bankAccount: true,
          createdAt: true,
          creditCardType: true,
          email: true,
          id: true,
          name: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/orders")
  @ApiNestedQuery(OrderFindManyArgs)
  async findOrders(
    @common.Req() request: Request,
    @common.Param() params: CreditCardHolderWhereUniqueInput
  ): Promise<Order[]> {
    const query = plainToClass(OrderFindManyArgs, request.query);
    const results = await this.service.findOrders(params.id, {
      ...query,
      select: {
        createdAt: true,

        creditCardHolder: {
          select: {
            id: true,
          },
        },

        customer: {
          select: {
            id: true,
          },
        },

        id: true,
        orderStatus: true,
        productLink: true,
        productName: true,
        totalAmount: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orders")
  async connectOrders(
    @common.Param() params: CreditCardHolderWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        connect: body,
      },
    };
    await this.service.updateCreditCardHolder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orders")
  async updateOrders(
    @common.Param() params: CreditCardHolderWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        set: body,
      },
    };
    await this.service.updateCreditCardHolder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orders")
  async disconnectOrders(
    @common.Param() params: CreditCardHolderWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        disconnect: body,
      },
    };
    await this.service.updateCreditCardHolder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/requests")
  @ApiNestedQuery(RequestFindManyArgs)
  async findRequests(
    @common.Req() request: Request,
    @common.Param() params: CreditCardHolderWhereUniqueInput
  ): Promise<Request[]> {
    const query = plainToClass(RequestFindManyArgs, request.query);
    const results = await this.service.findRequests(params.id, {
      ...query,
      select: {
        createdAt: true,

        creditCardHolder: {
          select: {
            id: true,
          },
        },

        customer: {
          select: {
            id: true,
          },
        },

        discountDetail: true,
        id: true,
        productLink: true,
        productName: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/requests")
  async connectRequests(
    @common.Param() params: CreditCardHolderWhereUniqueInput,
    @common.Body() body: RequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requests: {
        connect: body,
      },
    };
    await this.service.updateCreditCardHolder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/requests")
  async updateRequests(
    @common.Param() params: CreditCardHolderWhereUniqueInput,
    @common.Body() body: RequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requests: {
        set: body,
      },
    };
    await this.service.updateCreditCardHolder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/requests")
  async disconnectRequests(
    @common.Param() params: CreditCardHolderWhereUniqueInput,
    @common.Body() body: RequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requests: {
        disconnect: body,
      },
    };
    await this.service.updateCreditCardHolder({
      where: params,
      data,
      select: { id: true },
    });
  }
}
