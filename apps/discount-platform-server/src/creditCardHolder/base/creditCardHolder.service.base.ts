/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CreditCardHolder as PrismaCreditCardHolder,
  Order as PrismaOrder,
  Request as PrismaRequest,
} from "@prisma/client";

export class CreditCardHolderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreditCardHolderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creditCardHolder.count(args);
  }

  async creditCardHolders(
    args: Prisma.CreditCardHolderFindManyArgs
  ): Promise<PrismaCreditCardHolder[]> {
    return this.prisma.creditCardHolder.findMany(args);
  }
  async creditCardHolder(
    args: Prisma.CreditCardHolderFindUniqueArgs
  ): Promise<PrismaCreditCardHolder | null> {
    return this.prisma.creditCardHolder.findUnique(args);
  }
  async createCreditCardHolder(
    args: Prisma.CreditCardHolderCreateArgs
  ): Promise<PrismaCreditCardHolder> {
    return this.prisma.creditCardHolder.create(args);
  }
  async updateCreditCardHolder(
    args: Prisma.CreditCardHolderUpdateArgs
  ): Promise<PrismaCreditCardHolder> {
    return this.prisma.creditCardHolder.update(args);
  }
  async deleteCreditCardHolder(
    args: Prisma.CreditCardHolderDeleteArgs
  ): Promise<PrismaCreditCardHolder> {
    return this.prisma.creditCardHolder.delete(args);
  }

  async findOrders(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<PrismaOrder[]> {
    return this.prisma.creditCardHolder
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orders(args);
  }

  async findRequests(
    parentId: string,
    args: Prisma.RequestFindManyArgs
  ): Promise<PrismaRequest[]> {
    return this.prisma.creditCardHolder
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .requests(args);
  }
}
